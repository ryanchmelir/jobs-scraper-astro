-- supabase/migrations/00000000000000_baseline.sql
-- Enable Extensions
CREATE EXTENSION IF NOT EXISTS "pg_trgm";
CREATE EXTENSION IF NOT EXISTS "tsm_system_rows";

-- Create Enums
CREATE TYPE source_type AS ENUM ('greenhouse');
CREATE TYPE employment_type AS ENUM ('FULL_TIME', 'PART_TIME', 'CONTRACT', 'INTERNSHIP', 'UNKNOWN');
CREATE TYPE remote_status AS ENUM ('REMOTE', 'HYBRID', 'OFFICE', 'FLEXIBLE', 'UNKNOWN');

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create Companies Table
CREATE TABLE companies (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create Company Sources Table
CREATE TABLE company_sources (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id bigint REFERENCES companies(id) NOT NULL,
    source_type source_type NOT NULL,
    source_id varchar(255) NOT NULL,
    config jsonb,
    active boolean DEFAULT true,
    last_scraped timestamp with time zone,
    next_scrape_time timestamp with time zone,
    scrape_interval integer DEFAULT 1440,
    CONSTRAINT uix_source_id UNIQUE (source_type, source_id)
);

-- Create Company Source Issues Table
CREATE TABLE company_source_issues (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_source_id bigint REFERENCES company_sources(id) NOT NULL,
    failure_count integer DEFAULT 0 NOT NULL,
    last_failure timestamp with time zone,
    last_error text,
    CONSTRAINT uix_company_source_issues UNIQUE (company_source_id)
);

-- Create Jobs Table
CREATE TABLE jobs (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id bigint REFERENCES companies(id) NOT NULL,
    company_source_id bigint REFERENCES company_sources(id) NOT NULL,
    source_job_id varchar(255) NOT NULL,
    title varchar(255) NOT NULL,
    location varchar(255),
    department varchar(255),
    description text,
    url varchar(1024),
    raw_data jsonb,
    active boolean DEFAULT true,
    first_seen timestamp with time zone NOT NULL,
    last_seen timestamp with time zone NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    salary_min integer,
    salary_max integer,
    salary_currency varchar(3),
    employment_type employment_type DEFAULT 'UNKNOWN'::employment_type NOT NULL,
    remote_status remote_status DEFAULT 'UNKNOWN'::remote_status NOT NULL,
    needs_details boolean DEFAULT true NOT NULL,
    search_vector tsvector GENERATED ALWAYS AS (
        setweight(to_tsvector('english', coalesce(title,'')), 'A') ||
        setweight(to_tsvector('english', coalesce(department,'')), 'B') ||
        setweight(to_tsvector('english', coalesce(location,'')), 'B') ||
        setweight(to_tsvector('english', coalesce(description,'')), 'C')
    ) STORED,
    CONSTRAINT unique_job_per_source UNIQUE (company_source_id, source_job_id)
);

-- Create Job Scraping Issues Table
CREATE TABLE job_scraping_issues (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    job_id bigint REFERENCES jobs(id) ON DELETE CASCADE NOT NULL,
    failure_count integer DEFAULT 0 NOT NULL,
    last_failure timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    last_error text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT uix_job_scraping_issues UNIQUE (job_id)
);

-- Create Indexes
CREATE INDEX ix_companies_active ON companies (active);
CREATE INDEX ix_jobs_company_id ON jobs (company_id);
CREATE INDEX ix_jobs_company_source_id ON jobs (company_source_id);
CREATE INDEX ix_jobs_active ON jobs (active);
CREATE INDEX idx_jobs_needs_details ON jobs (needs_details) WHERE needs_details = true;
CREATE INDEX idx_jobs_company_source_active ON jobs (company_source_id, active) WHERE active = true;
CREATE INDEX jobs_search_idx ON jobs USING GIN (search_vector);

-- Create Triggers
CREATE TRIGGER update_companies_updated_at
    BEFORE UPDATE ON companies
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_jobs_updated_at
    BEFORE UPDATE ON jobs
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_job_scraping_issues_updated_at
    BEFORE UPDATE ON job_scraping_issues
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();