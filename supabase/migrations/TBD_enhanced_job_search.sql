-- Enhanced job search features
-- Depends on: 00000000000002_additional_dag_functions.sql

-- Create work location type
CREATE TYPE work_location AS ENUM ('remote', 'hybrid', 'onsite');

-- Add enhanced columns to jobs table
ALTER TABLE jobs 
    ADD COLUMN location_type work_location
    GENERATED ALWAYS AS (
        CASE 
            WHEN location ~* 'remote|virtual|anywhere' THEN 'remote'::work_location
            WHEN location ~* 'hybrid' THEN 'hybrid'::work_location
            ELSE 'onsite'::work_location
        END
    ) STORED,
    ADD COLUMN location_details jsonb
    GENERATED ALWAYS AS (
        jsonb_build_object(
            'type', 
            CASE 
                WHEN location ~* 'remote|virtual|anywhere' THEN 'remote'
                WHEN location ~* 'hybrid' THEN 'hybrid'
                ELSE 'onsite'
            END,
            'remote_restriction',
            CASE 
                WHEN location ~* 'remote.*(us|united states)' THEN 'US'
                WHEN location ~* 'remote.*uk' THEN 'UK'
                WHEN location ~* 'remote.*eu' THEN 'EU'
                WHEN location ~* 'remote' THEN 'GLOBAL'
                ELSE NULL
            END,
            'location_text',
            regexp_replace(
                regexp_replace(
                    location,
                    '(remote|hybrid|virtual|anywhere)\s*-?\s*',
                    ''
                ),
                '^\s+|\s+$',
                ''
            ),
            'likely_region',
            CASE 
                WHEN location ~* '(bay area|silicon valley|sf bay)' THEN 'SF Bay Area'
                WHEN location ~* '(greater boston|boston area)' THEN 'Greater Boston'
                WHEN location ~* '(nyc|new york city|greater new york)' THEN 'NYC Metro'
                WHEN location ~* '(la|los angeles|greater los angeles)' THEN 'LA Metro'
                ELSE NULL
            END
        )
    ) STORED,
    ADD COLUMN job_attributes jsonb
    GENERATED ALWAYS AS (
        jsonb_build_object(
            'seniority', 
            CASE 
                WHEN title ~* 'senior|sr|lead|principal' THEN 'senior'
                WHEN title ~* 'junior|jr|associate' THEN 'junior'
                ELSE 'mid'
            END,
            'employment_type',
            CASE 
                WHEN title ~* 'contract|contractor|temporary' THEN 'contract'
                WHEN title ~* 'intern|internship' THEN 'intern'
                ELSE 'full-time'
            END,
            'tech_stack',
            regexp_matches(
                lower(title || ' ' || COALESCE(department, '')),
                '(python|java|react|node|aws|golang|rust|kubernetes)',
                'g'
            )
        )
    ) STORED;

-- Create user searches table
CREATE TABLE user_searches (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid REFERENCES auth.users(id),
    search_query text NOT NULL,
    location_type work_location,
    remote_restrictions text[], -- Array of US, UK, EU, GLOBAL
    location_text text,        -- Free text location search
    seniority text,
    tech_stack text[],
    include_remote boolean DEFAULT true,
    include_hybrid boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create user notifications table
CREATE TABLE user_notifications (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid REFERENCES auth.users(id),
    job_id bigint REFERENCES jobs(id),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    read_at timestamp with time zone,
    UNIQUE(user_id, job_id)
);

-- Create enhanced search function
CREATE OR REPLACE FUNCTION search_jobs(
    search_query text,
    location_text text DEFAULT NULL,
    location_types work_location[] DEFAULT ARRAY['remote', 'hybrid', 'onsite']::work_location[],
    remote_restrictions text[] DEFAULT NULL,
    seniority text DEFAULT NULL,
    tech_stack text[] DEFAULT NULL,
    limit_val integer DEFAULT 100
) RETURNS TABLE (
    id bigint,
    title text,
    company_name text,
    location text,
    location_details jsonb,
    department text,
    job_attributes jsonb,
    rank real
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        j.id,
        j.title,
        c.name as company_name,
        j.location,
        j.location_details,
        j.department,
        j.job_attributes,
        ts_rank(j.search_vector, to_tsquery('english', search_query)) as rank
    FROM jobs j
    JOIN companies c ON c.id = j.company_id
    WHERE j.active = true
    AND j.search_vector @@ to_tsquery('english', search_query)
    AND j.location_type = ANY(location_types)
    AND (
        location_text IS NULL 
        OR j.location_details->>'location_text' ILIKE '%' || location_text || '%'
        OR j.location_details->>'likely_region' ILIKE '%' || location_text || '%'
    )
    AND (
        remote_restrictions IS NULL 
        OR j.location_type != 'remote'
        OR j.location_details->>'remote_restriction' = ANY(remote_restrictions)
    )
    AND (
        seniority IS NULL 
        OR j.job_attributes->>'seniority' = seniority
    )
    AND (
        tech_stack IS NULL 
        OR j.job_attributes->>'tech_stack' ?| tech_stack
    )
    ORDER BY 
        CASE 
            WHEN location_text IS NOT NULL 
            AND (
                j.location_details->>'location_text' ILIKE '%' || location_text || '%'
                OR j.location_details->>'likely_region' ILIKE '%' || location_text || '%'
            )
            THEN 0
            ELSE 1
        END,
        rank DESC
    LIMIT limit_val;
END;
$$ LANGUAGE plpgsql;

-- Create notification trigger
CREATE OR REPLACE FUNCTION notify_matching_searches()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO user_notifications (user_id, job_id)
    SELECT DISTINCT
        us.user_id,
        NEW.id as job_id
    FROM user_searches us
    WHERE 
        NEW.search_vector @@ to_tsquery('english', us.search_query)
        AND (
            us.location_type IS NULL 
            OR NEW.location_type = us.location_type
        )
        AND (
            us.remote_restrictions IS NULL 
            OR NEW.location_type != 'remote'
            OR NEW.location_details->>'remote_restriction' = ANY(us.remote_restrictions)
        )
        AND (
            us.location_text IS NULL 
            OR NEW.location_details->>'location_text' ILIKE '%' || us.location_text || '%'
            OR NEW.location_details->>'likely_region' ILIKE '%' || us.location_text || '%'
        )
        AND (
            us.seniority IS NULL 
            OR NEW.job_attributes->>'seniority' = us.seniority
        )
        AND (
            us.tech_stack IS NULL 
            OR NEW.job_attributes->>'tech_stack' ?| us.tech_stack
        );
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER job_notification_trigger
AFTER INSERT ON jobs
FOR EACH ROW
EXECUTE FUNCTION notify_matching_searches();

-- Create indices for performance
CREATE INDEX idx_jobs_location_type ON jobs (location_type);
CREATE INDEX idx_jobs_job_attributes ON jobs USING gin (job_attributes);
CREATE INDEX idx_jobs_location_details ON jobs USING gin (location_details);
CREATE INDEX idx_user_searches_user_id ON user_searches (user_id);
CREATE INDEX idx_user_notifications_user_id_read ON user_notifications (user_id) WHERE read_at IS NULL;